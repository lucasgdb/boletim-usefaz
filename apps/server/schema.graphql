type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  admin: Admin
  student: Student
  system: System
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Admin implements Node {
  """The ID of an object"""
  id: ID!
  firstname: String!

  """admin's lastname (must not be equals firstname)"""
  lastname: String
  email: String!
  fullname: String!
  avatarURL: String
  students(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): StudentConnection
  studentPasswordRecoveryRequests(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): StudentPasswordRecoveryRequestConnection
  notifications(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NotificationConnection
}

"""A connection to a list of items."""
type StudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type StudentEdge {
  """The item at the end of the edge"""
  node: Student

  """A cursor for use in pagination"""
  cursor: String!
}

type Student implements Node {
  """The ID of an object"""
  id: ID!
  RM: String!
  firstname: String!

  """student's lastname (must not be equals firstname)"""
  lastname: String
  fullname: String!
  avatarURL: String
  schoolReport: SchoolReport
}

type SchoolReport implements Node {
  """The ID of an object"""
  id: ID!
  year: Int!
  schoolReportRows(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): SchoolReportRowConnection
}

"""A connection to a list of items."""
type SchoolReportRowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SchoolReportRowEdge]
  count: Int!
}

"""An edge in a connection."""
type SchoolReportRowEdge {
  """The item at the end of the edge"""
  node: SchoolReportRowType

  """A cursor for use in pagination"""
  cursor: String!
}

type SchoolReportRowType {
  id: ID!
  disciplineName: String!
  firstBimesterGrade: Float!
  firstBimesterRecGrade: Float
  firstBimesterAbsences: Int!
  secondBimesterGrade: Float!
  secondBimesterRecGrade: Float
  secondBimesterAbsences: Int!
  thirdBimesterGrade: Float!
  thirdBimesterRecGrade: Float
  thirdBimesterAbsences: Int!
  fourthBimesterGrade: Float!
  fourthBimesterRecGrade: Float
  fourthBimesterAbsences: Int!
}

"""A connection to a list of items."""
type StudentPasswordRecoveryRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentPasswordRecoveryRequestEdge]
}

"""An edge in a connection."""
type StudentPasswordRecoveryRequestEdge {
  """The item at the end of the edge"""
  node: StudentPasswordRecoveryRequest

  """A cursor for use in pagination"""
  cursor: String!
}

type StudentPasswordRecoveryRequest implements Node {
  """The ID of an object"""
  id: ID!
  RM: String!
  email: String!
  status: StudentPasswordRecoveryRequestStatusEnum!
  student: Student!
}

enum StudentPasswordRecoveryRequestStatusEnum {
  PENDING
  REFUSED
  CHANGED
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]
  count: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge"""
  node: Notification

  """A cursor for use in pagination"""
  cursor: String!
}

type Notification implements Node {
  """The ID of an object"""
  id: ID!
  title: String!
  message: String!
  viewed: Boolean!
  sentAt: String!
}

type System {
  test: Int
}

type Mutation {
  adminLogin(input: AdminLoginMutationInput!): AdminLoginMutationPayload
  changeStudentInformation(input: ChangeStudentInformationMutationInput!): ChangeStudentInformationMutationPayload
  changeStudentPassword(input: ChangeStudentPasswordMutationInput!): ChangeStudentPasswordMutationPayload
  createStudent(input: CreateStudentMutationInput!): CreateStudentMutationPayload
  recoverAdminPassword(input: RecoverAdminPasswordMutationInput!): RecoverAdminPasswordMutationPayload
  refuseStudentPasswordRecoveryRequest(input: RefuseStudentPasswordRecoveryRequestMutationInput!): RefuseStudentPasswordRecoveryRequestMutationPayload
  sendAdminRecoveryEmail(input: SendAdminRecoveryEmailMutationInput!): SendAdminRecoveryEmailMutationPayload

  """The logOut mutation can be used to log out an existing user."""
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  setNotificationsAsViewed(input: SetNotificationsAsViewedMutationInput!): SetNotificationsAsViewedMutationPayload
  removeAvatar(input: RemoveAvatarMutationInput!): RemoveAvatarMutationPayload
  sendStudentPasswordRecoveryRequest(input: SendStudentPasswordRecoveryRequestMutationInput!): SendStudentPasswordRecoveryRequestMutationPayload
  studentLogin(input: StudentLoginMutationInput!): StudentLoginMutationPayload
}

type AdminLoginMutationPayload {
  jwtToken: String
  admin: Admin
  clientMutationId: String
}

input AdminLoginMutationInput {
  email: String!
  password: String!
  token: String!
  clientMutationId: String
}

type ChangeStudentInformationMutationPayload {
  student: Student
  clientMutationId: String
}

input ChangeStudentInformationMutationInput {
  studentId: ID!
  fullname: String
  RM: String
  password: String
  clientMutationId: String
}

type ChangeStudentPasswordMutationPayload {
  studentPasswordRecoveryRequest: StudentPasswordRecoveryRequest
  clientMutationId: String
}

input ChangeStudentPasswordMutationInput {
  studentPasswordRecoveryRequestId: ID!
  newPassword: String!
  clientMutationId: String
}

type CreateStudentMutationPayload {
  jwtToken: String
  clientMutationId: String
}

input CreateStudentMutationInput {
  RM: String!
  fullname: String!
  password: String!
  clientMutationId: String
}

type RecoverAdminPasswordMutationPayload {
  adminPasswordRecoveryRequest: AdminPasswordRecoveryRequest
  clientMutationId: String
}

type AdminPasswordRecoveryRequest implements Node {
  """The ID of an object"""
  id: ID!
  status: AdminPasswordRecoveryRequestStatusEnum!
}

enum AdminPasswordRecoveryRequestStatusEnum {
  PENDING
  CHANGED
}

input RecoverAdminPasswordMutationInput {
  adminPasswordRecoveryRequestId: ID!
  passwordRecoveryToken: String!
  password: String!
  passwordConfirmation: String!
  clientMutationId: String
}

type RefuseStudentPasswordRecoveryRequestMutationPayload {
  studentPasswordRecoveryRequest: StudentPasswordRecoveryRequest
  clientMutationId: String
}

input RefuseStudentPasswordRecoveryRequestMutationInput {
  studentPasswordRecoveryRequestId: ID!
  clientMutationId: String
}

type SendAdminRecoveryEmailMutationPayload {
  clientMutationId: String
}

input SendAdminRecoveryEmailMutationInput {
  email: String!
  clientMutationId: String
}

type LogoutMutationPayload {
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type SetNotificationsAsViewedMutationPayload {
  notifications: NotificationConnection
  clientMutationId: String
}

input SetNotificationsAsViewedMutationInput {
  notificationIds: [ID!]
  clientMutationId: String
}

type RemoveAvatarMutationPayload {
  student: Student!
  clientMutationId: String
}

input RemoveAvatarMutationInput {
  clientMutationId: String
}

type SendStudentPasswordRecoveryRequestMutationPayload {
  clientMutationId: String
}

input SendStudentPasswordRecoveryRequestMutationInput {
  RM: String!
  email: String!
  clientMutationId: String
}

type StudentLoginMutationPayload {
  jwtToken: String
  student: Student
  clientMutationId: String
}

input StudentLoginMutationInput {
  RM: String!
  password: String!
  token: String!
  clientMutationId: String
}