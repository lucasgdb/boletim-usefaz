type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  admin: Admin
  student: Student
  system: System
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Admin implements Node {
  """The ID of an object"""
  id: ID!
  email: String!
  studentPasswordRecoveries: StudentPasswordRecoveryRequestConnection
}

"""A connection to a list of items."""
type StudentPasswordRecoveryRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentPasswordRecoveryRequestEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type StudentPasswordRecoveryRequestEdge {
  """The item at the end of the edge"""
  node: StudentPasswordRecoveryRequest

  """A cursor for use in pagination"""
  cursor: String!
}

type StudentPasswordRecoveryRequest implements Node {
  """The ID of an object"""
  id: ID!
  status: StudentPasswordRecoveryRequestStatusEnum!
}

enum StudentPasswordRecoveryRequestStatusEnum {
  PENDING
  REFUSED
  CHANGED
}

type Student implements Node {
  """The ID of an object"""
  id: ID!
  RM: String!
  firstname: String!

  """student's lastname (must not be equals firstname)"""
  lastname: String
  fullname: String!
  avatarURL: String
}

type System {
  test: Int
}

type Mutation {
  adminLogin(input: AdminLoginMutationInput!): AdminLoginMutationPayload
  createStudent(input: CreateStudentMutationInput!): CreateStudentMutationPayload
  recoverAdminPassword(input: RecoverAdminPasswordMutationInput!): RecoverAdminPasswordMutationPayload
  sendAdminRecoveryEmail(input: SendAdminRecoveryEmailMutationInput!): SendAdminRecoveryEmailMutationPayload

  """The logOut mutation can be used to log out an existing user."""
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  removeAvatar(input: RemoveAvatarMutationInput!): RemoveAvatarMutationPayload
  sendStudentRecoveryEmail(input: SendStudentRecoveryEmailMutationInput!): SendStudentRecoveryEmailMutationPayload
  studentLogin(input: StudentLoginMutationInput!): StudentLoginMutationPayload
}

type AdminLoginMutationPayload {
  jwtToken: String
  admin: Admin
  clientMutationId: String
}

input AdminLoginMutationInput {
  email: String!
  password: String!
  token: String!
  clientMutationId: String
}

type CreateStudentMutationPayload {
  jwtToken: String
  clientMutationId: String
}

input CreateStudentMutationInput {
  RM: String!
  fullname: String!
  password: String!
  clientMutationId: String
}

type RecoverAdminPasswordMutationPayload {
  adminPasswordRecoveryRequest: AdminPasswordRecoveryRequest
  clientMutationId: String
}

type AdminPasswordRecoveryRequest implements Node {
  """The ID of an object"""
  id: ID!
  status: AdminPasswordRecoveryRequestStatusEnum!
}

enum AdminPasswordRecoveryRequestStatusEnum {
  PENDING
  CHANGED
}

input RecoverAdminPasswordMutationInput {
  adminPasswordRecoveryRequestId: ID!
  passwordRecoveryToken: String!
  password: String!
  passwordConfirmation: String!
  clientMutationId: String
}

type SendAdminRecoveryEmailMutationPayload {
  clientMutationId: String
}

input SendAdminRecoveryEmailMutationInput {
  email: String!
  clientMutationId: String
}

type LogoutMutationPayload {
  clientMutationId: String
}

input LogoutMutationInput {
  clientMutationId: String
}

type RemoveAvatarMutationPayload {
  student: Student!
  clientMutationId: String
}

input RemoveAvatarMutationInput {
  clientMutationId: String
}

type SendStudentRecoveryEmailMutationPayload {
  clientMutationId: String
}

input SendStudentRecoveryEmailMutationInput {
  RM: String!
  email: String!
  clientMutationId: String
}

type StudentLoginMutationPayload {
  jwtToken: String
  student: Student
  clientMutationId: String
}

input StudentLoginMutationInput {
  RM: String!
  password: String!
  token: String!
  clientMutationId: String
}